name: Build and Test
on: 
  push: {branches: ["main"]}
  pull_request:

jobs:
  build:
    env:
      ghc: 9.4.5
      cabal: 3.10.1.0
    name: Build
    runs-on: ubuntu-latest
    outputs:
      benchmarks: ${{steps.list-bins.outputs.benchs}}
      tests: ${{steps.list-bins.outputs.tests}}
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{github.event.pull_request.head.sha || github.sha}}
    - name: Calculate hash keys
      uses: actions/github-script@v6
      id: cache-keys
      with:
        script: |
          const script = require('./ci/generate-cache-key.js')
          await script({
            core, glob, os: "${{runner.os}}", ghc: "${{env.ghc}}",
            projects: [
              "cabal.project",
              "cabal.project.local",
              "cabal.project.freeze"
            ]
          })

    - name: Setup Haskell
      uses: haskell/actions/setup@v2
      with:
        enable-stack: false
        cabal-version: ${{env.cabal}}
        ghc-version: ${{env.ghc}}
    - name: Restore ~/.cabal/store
      uses: actions/cache/restore@v3
      with:
        path: ~/.cabal/store
        key: ${{steps.cache-keys.outputs.store}}
        restore-keys: ${{steps.cache-keys.outputs.store-restore}}
    - name: Restore dist-newstyle
      uses: actions/cache/restore@v3
      with:
        path: dist-newstyle
        key: ${{steps.cache-keys.outputs.dist}}
        restore-keys: ${{steps.cache-keys.outputs.dist-restore}}
    - name: cabal configure
      run: >
        cabal v2-configure
        --enable-tests --enable-benchmarks --enable-optimisation=2
        --constraint="herbrand +bench-chart"
        
        cabal update
    - name: Build Dependencies
      run: | 
        cabal build --only-dependencies
    - name: Save ~/.cabal/store Cache
      uses: actions/cache/save@v3
      with:
        path: ~/.cabal/store
        key: ${{steps.cache-keys.outputs.store}}
    - name: Build All
      run: | 
        cabal build
    - name: Save dist-newstyle Cache
      uses: actions/cache/save@v3
      with:
        path: dist-newstyle
        key: ${{steps.cache-keys.outputs.dist}}

    - name: Collect binaries
      continue-on-error: true
      run: ./ci/collect-bins.sh artifacts
    - name: Upload Aritracts
      uses: actions/upload-artifact@v3
      with:
        path: artifacts.tar.zst
        name: artifacts
    - name: List Binaries
      id: list-bins
      shell: bash
      run: |
        echo "benchs=$(jq -cMnR '[inputs]' <artifacts/benchs.list)" >>"${GITHUB_OUTPUT}"
        echo "tests=$(jq -cMnR '[inputs]' <artifacts/tests.list)" >>"${GITHUB_OUTPUT}"

  test:
    name: Test
    needs: [build]
    env:
      ghc: 9.4.5
      cabal: 3.10.1.0
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{github.event.pull_request.head.sha || github.sha}}
      - name: Download artifacts
        id: download
        uses: actions/download-artifact@v3
      - name: Decompress
        run: tar xaf artifacts/artifacts.tar.zst
      - name: Run Tests
        shell: bash
        run: |
          set -euo pipefail
          TOTAL=0
          SUCCESS=0
          FAIL=0
          while read -r TEST; do
            TOTAL=$((TOTAL + 1))
            echo "--------"
            echo "Running: ${TEST}"
            set +e
            ./artifacts/tests/"${TEST}"
            RESL=$?
            set -e
            if [ ${RESL} -eq 0 ]; then
              SUCCESS=$((SUCCESS + 1))
              echo "Result: Successed"
            else
              FAIL=$((FAIL + 1))
              echo 'Result: FAILED!'
            fi
          done <./artifacts/tests.list

          echo ""
          echo "----"

          if [ "${FAIL}" -eq 0 ]; then
            echo "All ${TOTAL} tests passed."
          else
            echo "${FAIL} out of ${TOTAL} tests FAILED"'!'
            exit 1
          fi
      
  bench:
    name: Benchrmark
    needs: [build]
    env:
      ghc: 9.4.5
      cabal: 3.10.1.0
      csv-path: bench-results/${{matrix.bench}}.csv
      svg-path: bench-results/${{matrix.bench}}.svg
      report-dir: bench-results/${{matrix.bench}}-report
      report-tarball: bench-results/${{matrix.bench}}-report.tar.gz
      branch: ${{ github.head_ref || github.ref_name }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        bench: ${{fromJSON(needs.build.outputs.benchmarks)}}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{github.event.pull_request.head.sha || github.sha}}
    - name: Modify Branch Name
      run: git switch -c ${{env.branch}}
    - name: Download artifacts
      id: download
      uses: actions/download-artifact@v3
    - name: Decompress
      run: tar xaf artifacts/artifacts.tar.zst
    - name: Run Benchmark
      uses: actions/github-script@v6
      id: benchmark
      with:
        script: |
          const script = require('./ci/compare-with-main.js')
          await script({
            core, glob, io, exec, context, github, fetch,
            bench_name: "${{matrix.bench}}",
            threshold: 20
          })
    - name: Upload CSV
      if: always()
      uses: actions/upload-artifact@v3
      with:
        path: ${{env.csv-path}}
        name: ${{matrix.bench}}.csv
    - name: Upload SVG
      if: always()
      uses: actions/upload-artifact@v3
      with:
        path: ${{env.svg-path}}
        name: ${{matrix.bench}}.svg
    
    - name: Generate Report
      if: always()
      shell: bash
      run: |
        BASELINE=${{steps.benchmark.outputs.baseline-csv}}
        BASELINE_DESC=$(cat <<"STOP_HERE_EOF_HERE"
        ${{steps.benchmark.outputs.baseline-desc}}
        STOP_HERE_EOF_HERE
        )

        if [[ -z "${BASELINE}" ]]; then
          ./artifacts/exes/bench-chart \
            -i "${{env.csv-path}}" \
            -o "${{env.report-dir}}" --git \
            -R "${{matrix.bench}}"
        else
          ./artifacts/exes/bench-chart \
            -i "${{env.csv-path}}" \
            -o "${{env.report-dir}}" --git \
            -R "${{matrix.bench}}" \
            --baseline "${BASELINE}" \
            --baseline-desc "${BASELINE_DESC}"
        fi

    - name: Compress Report
      if: always()
      run: >
        tar
        czvf "${{env.report-tarball}}"
        --directory=bench-results
        "${{matrix.bench}}-report"
    - name: Upload Report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        path: ${{env.report-tarball}}
        name: ${{matrix.bench}}-report

  upload-reports:
    concurrency:
      cancel-in-progress: false
      group: "pages"
    permissions: 
      pages: write
      id-token: write
      contents: write
      pull-requests: write
    environment:
      name: github-pages
      url: ${{steps.deployment.outputs.page_url}}

    name: Upload Reports
    if: (github.head_ref || github.ref_name) != 'gh-pages'
    needs: [build, bench]
    runs-on: ubuntu-latest
    env:
      sha: ${{github.event.pull_request.head.sha || github.sha}}
      branch: ${{ github.head_ref || github.ref_name }}
      pages-dir: pages
    steps:
    - name: Checkout HEAD
      uses: actions/checkout@v4
      with:
        ref: ${{env.sha}}
    - name: Modify Branch Name
      run: git switch -c ${{env.branch}}
    - name: Checkout gh-pages
      uses: actions/checkout@v4
      with:
        ref: gh-pages
        path: ${{env.pages-dir}}
        token: ${{secrets.GITHUB_TOKEN}}
    - name: Download artifacts
      id: download
      uses: actions/download-artifact@v3
      with:
        path: workspace/downloads
    - name: Extract bench results and generate
      id: generate
      shell: bash
      run: |
        set -euxo pipefail
        DL_DIR="${{steps.download.outputs.download-path}}"
        WORKDIR=workspace
        tar xaf "${DL_DIR}/artifacts/artifacts.tar.zst" --directory="${WORKDIR}"
        ARTIFACT_DIRS=${WORKDIR}/artifacts
        REPORT_DIR=${WORKDIR}/reports
        cat "${ARTIFACT_DIRS}/benchs.list" | while read -r BENCH; do
          DEST=${REPORT_DIR}/${BENCH}
          mkdir -p "${DEST}"
          ORIG_REPORT_NAME=${BENCH}-report
          tar xvf "${DL_DIR}/${ORIG_REPORT_NAME}/${ORIG_REPORT_NAME}.tar.gz" --directory "${DEST}" --strip-components=1
        done
        ls -R "${REPORT_DIR}"

        ARGS=(-c "${{env.pages-dir}}/reports.json" -i "${REPORT_DIR}" -o "${{env.pages-dir}}/docs/reports")
        ARGS+=(-R "${{github.event.repository.full_name}}")
        PULL=${{github.event.pull_request.number}}
        PULL_BASE_BRANCH=${{github.event.pull_request.head.ref}}
        PULL_BASE_COMMIT=${{github.event.pull_request.head.sha}}
        PULL_TITLE="${{github.event.pull_request.title}}"
        if [[ -n "${PULL}" ]]; then
          ARGS+=("--pull-number" "${PULL}")
          ARGS+=("--pull-title" "${PULL_TITLE}")
          ARGS+=("--pull-base-branch" "${PULL_BASE_BRANCH}")
          ARGS+=("--pull-base-commit" "${PULL_BASE_COMMIT}")
        fi

        ls -R "${{env.pages-dir}}"

        "${ARTIFACT_DIRS}/exes/bench-chart" update-report-pages "${ARGS[@]}"
    - name: Setup Pages
      uses: actions/configure-pages@v3
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
        # Upload entire repository
        path: ${{env.pages-dir}}/docs
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2
    - name: Report to PR
      if: ${{ github.event_name == 'pull_request' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        URL: ${{ github.event.pull_request.html_url }}
      run: >
        gh pr comment ${{github.event.pull_request.number}}
        -b ":bar_chart: Benchmark report for ${{env.sha}} is uploaded to: ${{steps.generate.outputs.url}}"
    - name: Make commit
      run: |
        cd pages
        git config --global user.name "github-actions"
        git config --global user.email "github-actions"
        git add .
        git commit -m "[bot] Report for ${{env.sha}} (${{env.branch}})"
        git push origin gh-pages
